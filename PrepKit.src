printInfo = function(message)
    print("<color=#80CFFF>" + message)
end function

printOk = function(message)
    print("<color=#7CFC98>" + message)
end function

printWarning = function(message)
    print("<color=#FFE066>" + message)
end function

printError = function(message)
    print("<color=#FF7C7C>" + message)
end function

printInfo("")
printInfo("")
printInfo("##########################################################")
printInfo("# PrepKit - A hybrid C-style preprocessor for GreyScript.")
printInfo("##########################################################")
printInfo("")

if params.len == 0 then
    printInfo("Usage:")
    printInfo("  prepkit [source file path] [options]")
    printInfo("")
    printInfo("Options:")
    printInfo(" -o <path> Specify output directory")
    printInfo(" -d        Dry run: process files without compilation")
    printInfo(" -i        Compiled binary can be imported in scripts")
    printInfo(" -c        Preserve entrypoint script name case")
    exit()
end if

NEW_LINE = char(10)
CurrentShell = get_shell
HostComputer = CurrentShell.host_computer

scriptStartTime = time

CLI_FLAGS = {}
i = 0
while i < params.len
    param = params[i]
    if param[0] == "-" then
        // Check to see if we have combined flags (e.g. -ab as -a and -b)
        if param.len > 2 then
            for j in range(1, param.len - 1)
                flag = "-" + param[j]
                CLI_FLAGS[flag] = true
            end for
        else
            // Check the next param to see if it is a value(no "-") for the current param
            if i + 1 < params.len and params[i + 1][0] != "-" then
                CLI_FLAGS[param] = params[i + 1]
                i = i + 1
            else
                CLI_FLAGS[param] = true  // flag without a value
            end if
        end if
    end if
    i = i + 1
end while

// 
// Resolves a relative path to an absolute path.
// 
// @param string relativePath  The relative path to resolve (e.g. "./folder/file.txt" -> /home/user/folder/file.txt).
// @param string currentPath   (Optional) The base path to resolve from. If null, uses current working directory.
// @return                     The resolved absolute path.
// 
resolvePath = function(relativePath, currentPath = null)
    if relativePath[0] == "/" then
        return relativePath  // already absolute
    end if

    if currentPath == null then
        currentPath = current_path
    end if

    pathComponents = relativePath.split("/")

    for component in pathComponents
        if component == "." then
            continue
        else if component == ".." then
            currentPath = parent_path(currentPath)
        else
            currentPath = currentPath + "/" + component
        end if
    end for

    return currentPath
end function

formatTime = function(seconds)
    if seconds >= 1 then
        return round(seconds * 100) / 100 + "s"
    else
        return round(seconds * 100000) / 100 + "ms"
    end if
end function

// Preps file for compilation.
// 
// @param File file    The file to process
// @param string outputDest  Destination folder path for output
// @return File        The prepped output file
// 
prepFile = function(file, outputDest, nestingLevel = 0)
    nestLevelIndent = ""
    if nestingLevel == 0 then
        printInfo("Processing entrypoint [" + file.name + "]")
    else
        nestLevelIndent = "  " * nestingLevel
    end if

    if not file.has_permission("r") then
        printError(nestLevelIndent + "|- Can not read file [" + file.path + "]: Permission denied!")
        exit()
    end if

    fileContents = file.get_content
    outputLines = []
    lines = fileContents.split(NEW_LINE)
    currentLine = 0;

    for line in lines
        line = line.trim
        currentLine = currentLine + 1
        // Skip empty lines and comments
        if line == "" or line[0] == "/" then
            continue
        end if

        // Process #import directive
        if line.indexOf("#import") != null then
            startQuote = line.indexOf("""")
            endQuote = line.lastIndexOf("""")
            
            if startQuote == null or endQuote == null or endQuote <= startQuote then
                printError(nestLevelIndent + "|- Invalid #import syntax in [" + file.path + "]:" + currentLine)
                exit()
            end if

            importPath = slice(line, startQuote + 1, endQuote).trim
             
            if importPath.indexOf(".src") == null then
                importPath = importPath + ".src"
            end if
            
            importResolvedPath = resolvePath(importPath, file.parent.path)
            importFile = HostComputer.File(importResolvedPath)
            if not importFile then
                printError(nestLevelIndent + "|- Import file [" + importResolvedPath + "] not found in [" + file.path + "]:" + currentLine)
                exit()
            end if
        
            printInfo(nestLevelIndent + "|- Linking [" + importFile.name + "]")
            
            // Preprocess the imported files first
            importedFile = prepFile(importFile, outputDest, nestingLevel + 1)

            if nestingLevel == 0 then
                outputLines.push("import_code" + "(""" + importedFile.path + """)") // The compiler sees "import_code" with a parenthesis next to it and freaks out :D
            else
                for importLine in importedFile
                    outputLines.push(importLine)
                end for
            end if

            continue
        end if

        outputLines.push(line)
    end for
    
    // The _first_ nest level uses "import_code" function, so we need to make a copy of the original imported files (processed on the _second_ nest level) and move them in the same output destination as the main source file. 
    // Starting with the _second_ nest level, everything is inlined, and the file location becomes irrelevant (except for the _second_ level itself because it is referenced in the main source file)
    if nestingLevel < 2 then
        outputFileName = file.name

        if nestingLevel == 0 and not CLI_FLAGS.hasIndex("-c") then
            outputFileName = outputFileName.lower
        end if

        outputPath = outputDest + "/" + outputFileName
        outputFile = HostComputer.File(outputPath)
        
        if outputFile == null then
            outputFileTouchResult = HostComputer.touch(outputDest, outputFileName)
            if outputFileTouchResult != 1 then
                printError(nestLevelIndent + "|- Failed to create output file [" + outputPath + "]: " + outputFileTouchResult)
                exit()
            else
                outputFile = HostComputer.File(outputPath)
                if outputFile == null then
                    printError(nestLevelIndent + "|- Failed to create output file [" + outputPath + "]")
                    exit()
                end if
            end if
        end if 
            
        outputFile.set_content(outputLines.join(NEW_LINE))	
        return outputFile
    end if

    return outputLines
end function

sourceFilePath = resolvePath(params[0])
sourceFile = HostComputer.File(sourceFilePath)
if not sourceFile then
    printError("Path Error: '" + sourceFilePath + "' is invalid!")
    exit()
end if

if sourceFile.is_folder then
    printError("Path Error: '" + sourceFilePath + "' is a directory, expected a file.")
    exit()
end if 

destinationPath = sourceFile.parent.path
if CLI_FLAGS.hasIndex("-o") then
    destinationResolvedPath = resolvePath(CLI_FLAGS["-o"])
    destinationPath = HostComputer.File(destinationResolvedPath)
    if not destinationPath then
        printError("Path Error: destination path ['" + destinationResolvedPath + "'] is invalid!")
        exit()
    end if

    if not destinationPath.is_folder then
        printError("Path Error: '" + destinationPath.path + "' is a file, expected a directory.")
        exit()
    end if 

    destinationPath = destinationPath.path
end if

dryRun = CLI_FLAGS.hasIndex("-d")
if dryRun then
    printWarning("Running in [DRY] mode: Processing files without compiling the binary!")
end if

outputDestDirName = "PREPKIT_OUT_" + sourceFile.name[0:-4]
outputDestPath = sourceFile.parent.path + "/" + outputDestDirName

if not HostComputer.File(outputDestPath) then
    HostComputer.create_folder(sourceFile.parent.path, outputDestDirName)
end if

processedFile = prepFile(sourceFile, outputDestPath)
inlinedSourceCodeFileName = processedFile.name[0:-4]

if not dryRun then
    printInfo("Compiling binary...")
    buildErrors = CurrentShell.build(processedFile.path, destinationPath, CLI_FLAGS.hasIndex("-i"))
    processedFile.parent.delete
        
    if buildErrors != "" then
        printError("Build failed: " + buildErrors)
        exit()
    end if

    printOk("Binary compiled: " + destinationPath + "/" + inlinedSourceCodeFileName)
end if

printOk("Processing finished in " + formatTime(time - scriptStartTime))
